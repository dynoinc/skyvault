// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dynoinc/skyvault/internal/database (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -destination=mock_database.go -package=mocks github.com/dynoinc/skyvault/internal/database Querier
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	database "github.com/dynoinc/skyvault/internal/database"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddL0Batch mocks base method.
func (m *MockQuerier) AddL0Batch(ctx context.Context, arg database.AddL0BatchParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddL0Batch", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddL0Batch indicates an expected call of AddL0Batch.
func (mr *MockQuerierMockRecorder) AddL0Batch(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddL0Batch", reflect.TypeOf((*MockQuerier)(nil).AddL0Batch), ctx, arg)
}

// DeleteL0Batches mocks base method.
func (m *MockQuerier) DeleteL0Batches(ctx context.Context, arg database.DeleteL0BatchesParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteL0Batches", ctx, arg)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteL0Batches indicates an expected call of DeleteL0Batches.
func (mr *MockQuerierMockRecorder) DeleteL0Batches(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteL0Batches", reflect.TypeOf((*MockQuerier)(nil).DeleteL0Batches), ctx, arg)
}

// GetL0Batches mocks base method.
func (m *MockQuerier) GetL0Batches(ctx context.Context) ([]database.L0Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetL0Batches", ctx)
	ret0, _ := ret[0].([]database.L0Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetL0Batches indicates an expected call of GetL0Batches.
func (mr *MockQuerierMockRecorder) GetL0Batches(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetL0Batches", reflect.TypeOf((*MockQuerier)(nil).GetL0Batches), ctx)
}

// GetL0BatchesByID mocks base method.
func (m *MockQuerier) GetL0BatchesByID(ctx context.Context, batchIds []int64) ([]database.L0Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetL0BatchesByID", ctx, batchIds)
	ret0, _ := ret[0].([]database.L0Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetL0BatchesByID indicates an expected call of GetL0BatchesByID.
func (mr *MockQuerierMockRecorder) GetL0BatchesByID(ctx, batchIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetL0BatchesByID", reflect.TypeOf((*MockQuerier)(nil).GetL0BatchesByID), ctx, batchIds)
}

// UpdateL0BatchesStatus mocks base method.
func (m *MockQuerier) UpdateL0BatchesStatus(ctx context.Context, arg database.UpdateL0BatchesStatusParams) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateL0BatchesStatus", ctx, arg)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateL0BatchesStatus indicates an expected call of UpdateL0BatchesStatus.
func (mr *MockQuerierMockRecorder) UpdateL0BatchesStatus(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateL0BatchesStatus", reflect.TypeOf((*MockQuerier)(nil).UpdateL0BatchesStatus), ctx, arg)
}
