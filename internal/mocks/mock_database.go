// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dynoinc/skyvault/internal/database (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -destination=mock_database.go -package=mocks github.com/dynoinc/skyvault/internal/database Querier
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/dynoinc/skyvault/gen/proto/common/v1"
	database "github.com/dynoinc/skyvault/internal/database"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddL0Batch mocks base method.
func (m *MockQuerier) AddL0Batch(ctx context.Context, attrs *v1.L0Batch) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddL0Batch", ctx, attrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddL0Batch indicates an expected call of AddL0Batch.
func (mr *MockQuerierMockRecorder) AddL0Batch(ctx, attrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddL0Batch", reflect.TypeOf((*MockQuerier)(nil).AddL0Batch), ctx, attrs)
}

// DeleteL0Batch mocks base method.
func (m *MockQuerier) DeleteL0Batch(ctx context.Context, arg database.DeleteL0BatchParams) (database.L0Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteL0Batch", ctx, arg)
	ret0, _ := ret[0].(database.L0Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteL0Batch indicates an expected call of DeleteL0Batch.
func (mr *MockQuerierMockRecorder) DeleteL0Batch(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteL0Batch", reflect.TypeOf((*MockQuerier)(nil).DeleteL0Batch), ctx, arg)
}

// GetL0Batches mocks base method.
func (m *MockQuerier) GetL0Batches(ctx context.Context) ([]database.L0Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetL0Batches", ctx)
	ret0, _ := ret[0].([]database.L0Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetL0Batches indicates an expected call of GetL0Batches.
func (mr *MockQuerierMockRecorder) GetL0Batches(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetL0Batches", reflect.TypeOf((*MockQuerier)(nil).GetL0Batches), ctx)
}

// GetL0BatchesBySeqNo mocks base method.
func (m *MockQuerier) GetL0BatchesBySeqNo(ctx context.Context, batchSeqNos []int64) ([]database.L0Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetL0BatchesBySeqNo", ctx, batchSeqNos)
	ret0, _ := ret[0].([]database.L0Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetL0BatchesBySeqNo indicates an expected call of GetL0BatchesBySeqNo.
func (mr *MockQuerierMockRecorder) GetL0BatchesBySeqNo(ctx, batchSeqNos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetL0BatchesBySeqNo", reflect.TypeOf((*MockQuerier)(nil).GetL0BatchesBySeqNo), ctx, batchSeqNos)
}

// GetPartitions mocks base method.
func (m *MockQuerier) GetPartitions(ctx context.Context) ([]database.Partition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitions", ctx)
	ret0, _ := ret[0].([]database.Partition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitions indicates an expected call of GetPartitions.
func (mr *MockQuerierMockRecorder) GetPartitions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitions", reflect.TypeOf((*MockQuerier)(nil).GetPartitions), ctx)
}

// InitPartitions mocks base method.
func (m *MockQuerier) InitPartitions(ctx context.Context, attrs *v1.Partition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitPartitions", ctx, attrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitPartitions indicates an expected call of InitPartitions.
func (mr *MockQuerierMockRecorder) InitPartitions(ctx, attrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitPartitions", reflect.TypeOf((*MockQuerier)(nil).InitPartitions), ctx, attrs)
}

// UpdateL0Batch mocks base method.
func (m *MockQuerier) UpdateL0Batch(ctx context.Context, arg database.UpdateL0BatchParams) (database.L0Batch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateL0Batch", ctx, arg)
	ret0, _ := ret[0].(database.L0Batch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateL0Batch indicates an expected call of UpdateL0Batch.
func (mr *MockQuerierMockRecorder) UpdateL0Batch(ctx, arg any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateL0Batch", reflect.TypeOf((*MockQuerier)(nil).UpdateL0Batch), ctx, arg)
}
