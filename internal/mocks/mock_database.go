// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dynoinc/skyvault/internal/database (interfaces: Querier)
//
// Generated by this command:
//
//	mockgen -destination=mock_database.go -package=mocks github.com/dynoinc/skyvault/internal/database Querier
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	v1 "github.com/dynoinc/skyvault/gen/proto/common/v1"
	database "github.com/dynoinc/skyvault/internal/database"
	gomock "go.uber.org/mock/gomock"
)

// MockQuerier is a mock of Querier interface.
type MockQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockQuerierMockRecorder
	isgomock struct{}
}

// MockQuerierMockRecorder is the mock recorder for MockQuerier.
type MockQuerierMockRecorder struct {
	mock *MockQuerier
}

// NewMockQuerier creates a new mock instance.
func NewMockQuerier(ctrl *gomock.Controller) *MockQuerier {
	mock := &MockQuerier{ctrl: ctrl}
	mock.recorder = &MockQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockQuerier) EXPECT() *MockQuerierMockRecorder {
	return m.recorder
}

// AddSharedRun mocks base method.
func (m *MockQuerier) AddSharedRun(ctx context.Context, attrs *v1.Run) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddSharedRun", ctx, attrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddSharedRun indicates an expected call of AddSharedRun.
func (mr *MockQuerierMockRecorder) AddSharedRun(ctx, attrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddSharedRun", reflect.TypeOf((*MockQuerier)(nil).AddSharedRun), ctx, attrs)
}

// AddWriteAheadLog mocks base method.
func (m *MockQuerier) AddWriteAheadLog(ctx context.Context, attrs *v1.WriteAheadLog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddWriteAheadLog", ctx, attrs)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddWriteAheadLog indicates an expected call of AddWriteAheadLog.
func (mr *MockQuerierMockRecorder) AddWriteAheadLog(ctx, attrs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddWriteAheadLog", reflect.TypeOf((*MockQuerier)(nil).AddWriteAheadLog), ctx, attrs)
}

// DeleteSharedRuns mocks base method.
func (m *MockQuerier) DeleteSharedRuns(ctx context.Context, seqNos []int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSharedRuns", ctx, seqNos)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteSharedRuns indicates an expected call of DeleteSharedRuns.
func (mr *MockQuerierMockRecorder) DeleteSharedRuns(ctx, seqNos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSharedRuns", reflect.TypeOf((*MockQuerier)(nil).DeleteSharedRuns), ctx, seqNos)
}

// DeleteWriteAheadLogs mocks base method.
func (m *MockQuerier) DeleteWriteAheadLogs(ctx context.Context, seqNos []int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWriteAheadLogs", ctx, seqNos)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteWriteAheadLogs indicates an expected call of DeleteWriteAheadLogs.
func (mr *MockQuerierMockRecorder) DeleteWriteAheadLogs(ctx, seqNos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWriteAheadLogs", reflect.TypeOf((*MockQuerier)(nil).DeleteWriteAheadLogs), ctx, seqNos)
}

// GetPartitions mocks base method.
func (m *MockQuerier) GetPartitions(ctx context.Context) ([]database.Partition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPartitions", ctx)
	ret0, _ := ret[0].([]database.Partition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPartitions indicates an expected call of GetPartitions.
func (mr *MockQuerierMockRecorder) GetPartitions(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPartitions", reflect.TypeOf((*MockQuerier)(nil).GetPartitions), ctx)
}

// GetSharedRuns mocks base method.
func (m *MockQuerier) GetSharedRuns(ctx context.Context) ([]database.SharedRun, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSharedRuns", ctx)
	ret0, _ := ret[0].([]database.SharedRun)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSharedRuns indicates an expected call of GetSharedRuns.
func (mr *MockQuerierMockRecorder) GetSharedRuns(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSharedRuns", reflect.TypeOf((*MockQuerier)(nil).GetSharedRuns), ctx)
}

// GetWriteAheadLogs mocks base method.
func (m *MockQuerier) GetWriteAheadLogs(ctx context.Context) ([]database.WriteAheadLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWriteAheadLogs", ctx)
	ret0, _ := ret[0].([]database.WriteAheadLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWriteAheadLogs indicates an expected call of GetWriteAheadLogs.
func (mr *MockQuerierMockRecorder) GetWriteAheadLogs(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriteAheadLogs", reflect.TypeOf((*MockQuerier)(nil).GetWriteAheadLogs), ctx)
}

// GetWriteAheadLogsToCompact mocks base method.
func (m *MockQuerier) GetWriteAheadLogsToCompact(ctx context.Context) ([]database.WriteAheadLog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWriteAheadLogsToCompact", ctx)
	ret0, _ := ret[0].([]database.WriteAheadLog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWriteAheadLogsToCompact indicates an expected call of GetWriteAheadLogsToCompact.
func (mr *MockQuerierMockRecorder) GetWriteAheadLogsToCompact(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWriteAheadLogsToCompact", reflect.TypeOf((*MockQuerier)(nil).GetWriteAheadLogsToCompact), ctx)
}

// MarkWriteAheadLogsAsCompacting mocks base method.
func (m *MockQuerier) MarkWriteAheadLogsAsCompacting(ctx context.Context, seqNos []int64) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkWriteAheadLogsAsCompacting", ctx, seqNos)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkWriteAheadLogsAsCompacting indicates an expected call of MarkWriteAheadLogsAsCompacting.
func (mr *MockQuerierMockRecorder) MarkWriteAheadLogsAsCompacting(ctx, seqNos any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkWriteAheadLogsAsCompacting", reflect.TypeOf((*MockQuerier)(nil).MarkWriteAheadLogsAsCompacting), ctx, seqNos)
}
