// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dynoinc/skyvault/gen/proto/cache/v1/v1connect (interfaces: CacheServiceClient)
//
// Generated by this command:
//
//	mockgen -destination=internal/mocks/mock_cache_client.go -package=mocks github.com/dynoinc/skyvault/gen/proto/cache/v1/v1connect CacheServiceClient
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	connect "connectrpc.com/connect"
	v1 "github.com/dynoinc/skyvault/gen/proto/cache/v1"
	gomock "go.uber.org/mock/gomock"
)

// MockCacheServiceClient is a mock of CacheServiceClient interface.
type MockCacheServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockCacheServiceClientMockRecorder
	isgomock struct{}
}

// MockCacheServiceClientMockRecorder is the mock recorder for MockCacheServiceClient.
type MockCacheServiceClientMockRecorder struct {
	mock *MockCacheServiceClient
}

// NewMockCacheServiceClient creates a new mock instance.
func NewMockCacheServiceClient(ctrl *gomock.Controller) *MockCacheServiceClient {
	mock := &MockCacheServiceClient{ctrl: ctrl}
	mock.recorder = &MockCacheServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCacheServiceClient) EXPECT() *MockCacheServiceClientMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockCacheServiceClient) Get(arg0 context.Context, arg1 *connect.Request[v1.GetRequest]) (*connect.Response[v1.GetResponse], error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*connect.Response[v1.GetResponse])
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCacheServiceClientMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCacheServiceClient)(nil).Get), arg0, arg1)
}
