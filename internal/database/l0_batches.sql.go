// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: l0_batches.sql

package database

import (
	"context"

	dto "github.com/dynoinc/skyvault/internal/database/dto"
)

const addL0Batch = `-- name: AddL0Batch :exec
INSERT INTO l0_batches (attrs) VALUES ($1)
`

func (q *Queries) AddL0Batch(ctx context.Context, attrs dto.L0BatchAttrs) error {
	_, err := q.db.Exec(ctx, addL0Batch, attrs)
	return err
}

const deleteL0Batch = `-- name: DeleteL0Batch :one
DELETE FROM l0_batches
WHERE seq_no = $1 AND version = $2
RETURNING seq_no, version, attrs
`

type DeleteL0BatchParams struct {
	SeqNo   int64
	Version int32
}

func (q *Queries) DeleteL0Batch(ctx context.Context, arg DeleteL0BatchParams) (L0Batch, error) {
	row := q.db.QueryRow(ctx, deleteL0Batch, arg.SeqNo, arg.Version)
	var i L0Batch
	err := row.Scan(&i.SeqNo, &i.Version, &i.Attrs)
	return i, err
}

const getL0Batches = `-- name: GetL0Batches :many
SELECT seq_no, version, attrs FROM l0_batches
`

func (q *Queries) GetL0Batches(ctx context.Context) ([]L0Batch, error) {
	rows, err := q.db.Query(ctx, getL0Batches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []L0Batch
	for rows.Next() {
		var i L0Batch
		if err := rows.Scan(&i.SeqNo, &i.Version, &i.Attrs); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getL0BatchesBySeqNo = `-- name: GetL0BatchesBySeqNo :many
SELECT seq_no, version, attrs FROM l0_batches
WHERE seq_no = ANY($1::bigint[])
`

func (q *Queries) GetL0BatchesBySeqNo(ctx context.Context, batchSeqNos []int64) ([]L0Batch, error) {
	rows, err := q.db.Query(ctx, getL0BatchesBySeqNo, batchSeqNos)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []L0Batch
	for rows.Next() {
		var i L0Batch
		if err := rows.Scan(&i.SeqNo, &i.Version, &i.Attrs); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateL0Batch = `-- name: UpdateL0Batch :one
UPDATE l0_batches
SET attrs = attrs || $1
WHERE seq_no = $2 AND version = $3
RETURNING seq_no, version, attrs
`

type UpdateL0BatchParams struct {
	Attrs   dto.L0BatchAttrs
	SeqNo   int64
	Version int32
}

func (q *Queries) UpdateL0Batch(ctx context.Context, arg UpdateL0BatchParams) (L0Batch, error) {
	row := q.db.QueryRow(ctx, updateL0Batch, arg.Attrs, arg.SeqNo, arg.Version)
	var i L0Batch
	err := row.Scan(&i.SeqNo, &i.Version, &i.Attrs)
	return i, err
}
