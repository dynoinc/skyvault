// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: l0_batches.sql

package database

import (
	"context"
)

const addL0Batch = `-- name: AddL0Batch :one
INSERT INTO l0_batches (path) VALUES ($1) RETURNING id
`

func (q *Queries) AddL0Batch(ctx context.Context, path string) (int64, error) {
	row := q.db.QueryRow(ctx, addL0Batch, path)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAllL0Batches = `-- name: GetAllL0Batches :many
SELECT id, path, status, created_at FROM l0_batches
`

func (q *Queries) GetAllL0Batches(ctx context.Context) ([]L0Batch, error) {
	rows, err := q.db.Query(ctx, getAllL0Batches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []L0Batch
	for rows.Next() {
		var i L0Batch
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
