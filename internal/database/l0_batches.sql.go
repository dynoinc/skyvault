// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: l0_batches.sql

package database

import (
	"context"
)

const addL0Batch = `-- name: AddL0Batch :one
INSERT INTO l0_batches (path, size_bytes, min_key, max_key) VALUES ($1, $2, $3, $4) RETURNING id
`

type AddL0BatchParams struct {
	Path      string
	SizeBytes int64
	MinKey    string
	MaxKey    string
}

func (q *Queries) AddL0Batch(ctx context.Context, arg AddL0BatchParams) (int64, error) {
	row := q.db.QueryRow(ctx, addL0Batch,
		arg.Path,
		arg.SizeBytes,
		arg.MinKey,
		arg.MaxKey,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteL0Batches = `-- name: DeleteL0Batches :exec
DELETE FROM l0_batches
WHERE id = ANY($1::bigint[])
  AND status = $2::text
`

type DeleteL0BatchesParams struct {
	BatchIds      []int64
	CurrentStatus string
}

func (q *Queries) DeleteL0Batches(ctx context.Context, arg DeleteL0BatchesParams) error {
	_, err := q.db.Exec(ctx, deleteL0Batches, arg.BatchIds, arg.CurrentStatus)
	return err
}

const getL0Batches = `-- name: GetL0Batches :many
SELECT id, path, size_bytes, min_key, max_key, status, created_at FROM l0_batches
`

func (q *Queries) GetL0Batches(ctx context.Context) ([]L0Batch, error) {
	rows, err := q.db.Query(ctx, getL0Batches)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []L0Batch
	for rows.Next() {
		var i L0Batch
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.SizeBytes,
			&i.MinKey,
			&i.MaxKey,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getL0BatchesByID = `-- name: GetL0BatchesByID :many
SELECT id, path, size_bytes, min_key, max_key, status, created_at FROM l0_batches
WHERE id = ANY($1::bigint[])
`

func (q *Queries) GetL0BatchesByID(ctx context.Context, batchIds []int64) ([]L0Batch, error) {
	rows, err := q.db.Query(ctx, getL0BatchesByID, batchIds)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []L0Batch
	for rows.Next() {
		var i L0Batch
		if err := rows.Scan(
			&i.ID,
			&i.Path,
			&i.SizeBytes,
			&i.MinKey,
			&i.MaxKey,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateL0BatchesStatus = `-- name: UpdateL0BatchesStatus :one
WITH updated AS (
  UPDATE l0_batches
  SET status = $1::text
  WHERE id = ANY($2::bigint[])
    AND status = $3::text
  RETURNING id
)
SELECT count(*) FROM updated
`

type UpdateL0BatchesStatusParams struct {
	NewStatus     string
	BatchIds      []int64
	CurrentStatus string
}

func (q *Queries) UpdateL0BatchesStatus(ctx context.Context, arg UpdateL0BatchesStatusParams) (int64, error) {
	row := q.db.QueryRow(ctx, updateL0BatchesStatus, arg.NewStatus, arg.BatchIds, arg.CurrentStatus)
	var count int64
	err := row.Scan(&count)
	return count, err
}
