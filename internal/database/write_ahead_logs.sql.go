// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: write_ahead_logs.sql

package database

import (
	"context"

	v1 "github.com/dynoinc/skyvault/gen/proto/common/v1"
)

const addWriteAheadLog = `-- name: AddWriteAheadLog :exec
INSERT INTO write_ahead_logs (attrs)
VALUES ($1)
`

func (q *Queries) AddWriteAheadLog(ctx context.Context, attrs *v1.WriteAheadLog) error {
	_, err := q.db.Exec(ctx, addWriteAheadLog, attrs)
	return err
}

const deleteWriteAheadLogs = `-- name: DeleteWriteAheadLogs :one
WITH validation AS (
  SELECT COUNT(*) = array_length($1::bigint[], 1) as all_exist_and_compacting
  FROM write_ahead_logs 
  WHERE seq_no = ANY ($1::bigint[])
  AND state = 'COMPACTING'
),
delete_result AS (
  DELETE FROM write_ahead_logs
  WHERE seq_no = ANY ($1::bigint[])
  AND state = 'COMPACTING'
  AND EXISTS (
    SELECT 1 FROM validation WHERE all_exist_and_compacting
  )
  RETURNING seq_no
)
SELECT EXISTS (
  SELECT 1 FROM validation WHERE all_exist_and_compacting
  AND EXISTS (SELECT 1 FROM delete_result)
)
`

func (q *Queries) DeleteWriteAheadLogs(ctx context.Context, seqNos []int64) (bool, error) {
	row := q.db.QueryRow(ctx, deleteWriteAheadLogs, seqNos)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getWriteAheadLogs = `-- name: GetWriteAheadLogs :many
SELECT seq_no, state, attrs
FROM write_ahead_logs
`

func (q *Queries) GetWriteAheadLogs(ctx context.Context) ([]WriteAheadLog, error) {
	rows, err := q.db.Query(ctx, getWriteAheadLogs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WriteAheadLog
	for rows.Next() {
		var i WriteAheadLog
		if err := rows.Scan(&i.SeqNo, &i.State, &i.Attrs); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWriteAheadLogsToCompact = `-- name: GetWriteAheadLogsToCompact :many
SELECT seq_no, state, attrs
FROM write_ahead_logs
WHERE state = 'NEW'
`

func (q *Queries) GetWriteAheadLogsToCompact(ctx context.Context) ([]WriteAheadLog, error) {
	rows, err := q.db.Query(ctx, getWriteAheadLogsToCompact)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WriteAheadLog
	for rows.Next() {
		var i WriteAheadLog
		if err := rows.Scan(&i.SeqNo, &i.State, &i.Attrs); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const markWriteAheadLogsAsCompacting = `-- name: MarkWriteAheadLogsAsCompacting :one
WITH validation AS (
  SELECT COUNT(*) = array_length($1::bigint[], 1) as all_exist
  FROM write_ahead_logs 
  WHERE seq_no = ANY ($1::bigint[])
  AND state = 'NEW'
),
update_result AS (
  UPDATE write_ahead_logs
  SET state = 'COMPACTING'
  WHERE seq_no = ANY ($1::bigint[])
  AND state = 'NEW'
  AND EXISTS (
    SELECT 1 FROM validation WHERE all_exist
  )
  RETURNING seq_no
)
SELECT EXISTS (
  SELECT 1 FROM validation WHERE all_exist
  AND EXISTS (SELECT 1 FROM update_result)
)
`

func (q *Queries) MarkWriteAheadLogsAsCompacting(ctx context.Context, seqNos []int64) (bool, error) {
	row := q.db.QueryRow(ctx, markWriteAheadLogsAsCompacting, seqNos)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}
