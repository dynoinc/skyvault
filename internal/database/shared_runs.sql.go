// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: shared_runs.sql

package database

import (
	"context"

	v1 "github.com/dynoinc/skyvault/gen/proto/common/v1"
)

const addSharedRun = `-- name: AddSharedRun :exec
INSERT INTO shared_runs (attrs)
VALUES ($1)
`

func (q *Queries) AddSharedRun(ctx context.Context, attrs *v1.Run) error {
	_, err := q.db.Exec(ctx, addSharedRun, attrs)
	return err
}

const deleteSharedRuns = `-- name: DeleteSharedRuns :one
WITH validation AS (
  SELECT COUNT(*) = array_length($1::bigint[], 1) as all_exist
  FROM shared_runs 
  WHERE seq_no = ANY ($1::bigint[])
),
delete_result AS (
  DELETE FROM shared_runs
  WHERE seq_no = ANY ($1::bigint[])
  AND EXISTS (
    SELECT 1 FROM validation WHERE all_exist
  )
  RETURNING seq_no
)
SELECT EXISTS (
  SELECT 1 FROM validation WHERE all_exist
  AND EXISTS (SELECT 1 FROM delete_result)
)
`

func (q *Queries) DeleteSharedRuns(ctx context.Context, seqNos []int64) (bool, error) {
	row := q.db.QueryRow(ctx, deleteSharedRuns, seqNos)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getSharedRuns = `-- name: GetSharedRuns :many
SELECT seq_no, attrs
FROM shared_runs
`

func (q *Queries) GetSharedRuns(ctx context.Context) ([]SharedRun, error) {
	rows, err := q.db.Query(ctx, getSharedRuns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SharedRun
	for rows.Next() {
		var i SharedRun
		if err := rows.Scan(&i.SeqNo, &i.Attrs); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
