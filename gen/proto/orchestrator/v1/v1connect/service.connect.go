// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/orchestrator/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dynoinc/skyvault/gen/proto/orchestrator/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// OrchestratorServiceName is the fully-qualified name of the OrchestratorService service.
	OrchestratorServiceName = "orchestrator.v1.OrchestratorService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// OrchestratorServiceListL0BatchesProcedure is the fully-qualified name of the
	// OrchestratorService's ListL0Batches RPC.
	OrchestratorServiceListL0BatchesProcedure = "/orchestrator.v1.OrchestratorService/ListL0Batches"
)

// OrchestratorServiceClient is a client for the orchestrator.v1.OrchestratorService service.
type OrchestratorServiceClient interface {
	ListL0Batches(context.Context, *connect.Request[v1.ListL0BatchesRequest]) (*connect.Response[v1.ListL0BatchesResponse], error)
}

// NewOrchestratorServiceClient constructs a client for the orchestrator.v1.OrchestratorService
// service. By default, it uses the Connect protocol with the binary Protobuf Codec, asks for
// gzipped responses, and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply
// the connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewOrchestratorServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) OrchestratorServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	orchestratorServiceMethods := v1.File_proto_orchestrator_v1_service_proto.Services().ByName("OrchestratorService").Methods()
	return &orchestratorServiceClient{
		listL0Batches: connect.NewClient[v1.ListL0BatchesRequest, v1.ListL0BatchesResponse](
			httpClient,
			baseURL+OrchestratorServiceListL0BatchesProcedure,
			connect.WithSchema(orchestratorServiceMethods.ByName("ListL0Batches")),
			connect.WithClientOptions(opts...),
		),
	}
}

// orchestratorServiceClient implements OrchestratorServiceClient.
type orchestratorServiceClient struct {
	listL0Batches *connect.Client[v1.ListL0BatchesRequest, v1.ListL0BatchesResponse]
}

// ListL0Batches calls orchestrator.v1.OrchestratorService.ListL0Batches.
func (c *orchestratorServiceClient) ListL0Batches(ctx context.Context, req *connect.Request[v1.ListL0BatchesRequest]) (*connect.Response[v1.ListL0BatchesResponse], error) {
	return c.listL0Batches.CallUnary(ctx, req)
}

// OrchestratorServiceHandler is an implementation of the orchestrator.v1.OrchestratorService
// service.
type OrchestratorServiceHandler interface {
	ListL0Batches(context.Context, *connect.Request[v1.ListL0BatchesRequest]) (*connect.Response[v1.ListL0BatchesResponse], error)
}

// NewOrchestratorServiceHandler builds an HTTP handler from the service implementation. It returns
// the path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewOrchestratorServiceHandler(svc OrchestratorServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	orchestratorServiceMethods := v1.File_proto_orchestrator_v1_service_proto.Services().ByName("OrchestratorService").Methods()
	orchestratorServiceListL0BatchesHandler := connect.NewUnaryHandler(
		OrchestratorServiceListL0BatchesProcedure,
		svc.ListL0Batches,
		connect.WithSchema(orchestratorServiceMethods.ByName("ListL0Batches")),
		connect.WithHandlerOptions(opts...),
	)
	return "/orchestrator.v1.OrchestratorService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case OrchestratorServiceListL0BatchesProcedure:
			orchestratorServiceListL0BatchesHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedOrchestratorServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedOrchestratorServiceHandler struct{}

func (UnimplementedOrchestratorServiceHandler) ListL0Batches(context.Context, *connect.Request[v1.ListL0BatchesRequest]) (*connect.Response[v1.ListL0BatchesResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("orchestrator.v1.OrchestratorService.ListL0Batches is not implemented"))
}
