// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/batcher/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/dynoinc/skyvault/gen/proto/batcher/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// BatcherServiceName is the fully-qualified name of the BatcherService service.
	BatcherServiceName = "batcher.v1.BatcherService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// BatcherServiceBatchWriteProcedure is the fully-qualified name of the BatcherService's BatchWrite
	// RPC.
	BatcherServiceBatchWriteProcedure = "/batcher.v1.BatcherService/BatchWrite"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	batcherServiceServiceDescriptor          = v1.File_proto_batcher_v1_service_proto.Services().ByName("BatcherService")
	batcherServiceBatchWriteMethodDescriptor = batcherServiceServiceDescriptor.Methods().ByName("BatchWrite")
)

// BatcherServiceClient is a client for the batcher.v1.BatcherService service.
type BatcherServiceClient interface {
	BatchWrite(context.Context, *connect.Request[v1.BatchWriteRequest]) (*connect.Response[v1.BatchWriteResponse], error)
}

// NewBatcherServiceClient constructs a client for the batcher.v1.BatcherService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewBatcherServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) BatcherServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &batcherServiceClient{
		batchWrite: connect.NewClient[v1.BatchWriteRequest, v1.BatchWriteResponse](
			httpClient,
			baseURL+BatcherServiceBatchWriteProcedure,
			connect.WithSchema(batcherServiceBatchWriteMethodDescriptor),
			connect.WithClientOptions(opts...),
		),
	}
}

// batcherServiceClient implements BatcherServiceClient.
type batcherServiceClient struct {
	batchWrite *connect.Client[v1.BatchWriteRequest, v1.BatchWriteResponse]
}

// BatchWrite calls batcher.v1.BatcherService.BatchWrite.
func (c *batcherServiceClient) BatchWrite(ctx context.Context, req *connect.Request[v1.BatchWriteRequest]) (*connect.Response[v1.BatchWriteResponse], error) {
	return c.batchWrite.CallUnary(ctx, req)
}

// BatcherServiceHandler is an implementation of the batcher.v1.BatcherService service.
type BatcherServiceHandler interface {
	BatchWrite(context.Context, *connect.Request[v1.BatchWriteRequest]) (*connect.Response[v1.BatchWriteResponse], error)
}

// NewBatcherServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewBatcherServiceHandler(svc BatcherServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	batcherServiceBatchWriteHandler := connect.NewUnaryHandler(
		BatcherServiceBatchWriteProcedure,
		svc.BatchWrite,
		connect.WithSchema(batcherServiceBatchWriteMethodDescriptor),
		connect.WithHandlerOptions(opts...),
	)
	return "/batcher.v1.BatcherService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case BatcherServiceBatchWriteProcedure:
			batcherServiceBatchWriteHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedBatcherServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedBatcherServiceHandler struct{}

func (UnimplementedBatcherServiceHandler) BatchWrite(context.Context, *connect.Request[v1.BatchWriteRequest]) (*connect.Response[v1.BatchWriteResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("batcher.v1.BatcherService.BatchWrite is not implemented"))
}
