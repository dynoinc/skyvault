// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: proto/frontend/v1/service.proto

package v1connect

import (
	connect "connectrpc.com/connect"
	v1 "github.com/dynoinc/skyvault/gen/proto/frontend/v1"
	http "net/http"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// FrontendServiceName is the fully-qualified name of the FrontendService service.
	FrontendServiceName = "frontend.v1.FrontendService"
)

// These variables are the protoreflect.Descriptor objects for the RPCs defined in this package.
var (
	frontendServiceServiceDescriptor = v1.File_proto_frontend_v1_service_proto.Services().ByName("FrontendService")
)

// FrontendServiceClient is a client for the frontend.v1.FrontendService service.
type FrontendServiceClient interface {
}

// NewFrontendServiceClient constructs a client for the frontend.v1.FrontendService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewFrontendServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) FrontendServiceClient {
	return &frontendServiceClient{}
}

// frontendServiceClient implements FrontendServiceClient.
type frontendServiceClient struct {
}

// FrontendServiceHandler is an implementation of the frontend.v1.FrontendService service.
type FrontendServiceHandler interface {
}

// NewFrontendServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewFrontendServiceHandler(svc FrontendServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	return "/frontend.v1.FrontendService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedFrontendServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedFrontendServiceHandler struct{}
